{
  "__document_status__": "Active",
  "id": 19,
  "name": "Loopar Concepts",
  "module": "loopar-web",
  "doc_structure": "[{\"element\":\"menu_content\",\"data\":{\"label\":\"Menu_content2\",\"key\":\"menu_content2_el321766053488\"},\"elements\":[{\"element\":\"markdown\",\"data\":{\"label\":\"Main Entities\",\"key\":\"markdown1_el226376629411\",\"value\":\"# Main Entities\\n\\n## 1. Entity  \\n**Entity** is the core model of the system, serving as the foundation for creating various types of models. It allows users to define components, organize metadata, and generate the necessary backend and frontend structures for models such as pages, views, and forms. The drag-and-drop interface and flexibility make it a versatile tool for general-purpose model creation.  \\n\\n---\\n\\n## 2. Builders  \\n**Builders** are specialized entities created using the **Entity** model, designed to generate specific types of models. While Entity offers general-purpose functionality, Builders focus on tailoring metadata and functionality to meet the requirements of particular model types. This eliminates unnecessary metadata and ensures optimized structures for each case.  \\n\\n### Types of Builders  \\n\\n- **Page Builder**  \\n  Focused on creating desktop or web pages, the **Page Builder** provides all the tools needed to design complete web pages such as homepages, blogs, or landing pages. It ensures only the essential metadata for a page is included, offering a streamlined and efficient page-building experience.  \\n\\n- **View Builder**  \\n  The **View Builder** creates models designed specifically for rendering data. Its main function is to connect to a model and visually display its metadata. It also allows users to customize the layout and presentation of the view, offering flexibility for unique display needs.  \\n\\n- **Form Builder**  \\n  The **Form Builder** is specialized in creating forms. Its primary purpose is to facilitate data collection and submission to a controller. Examples include login forms, password recovery forms, or specific forms for handling segments of a model.  \\n\\n- **Controller Builder**  \\n  The **Controller Builder** focuses on generating the structure of server-side controllers. It is ideal for creating controllers such as `LoginController` that manage specific actions like login, registration, or password reset. Controllers built this way enable the creation of routes and actions without requiring a full model, providing an efficient solution for specific backend tasks.  \\n\\n---\\n\\nBy providing these specialized Builders, Loopar ensures a highly efficient and streamlined development process, where each model type is perfectly adapted to its intended purpose.\\n\\n\",\"background_image\":[]},\"elements\":[]},{\"element\":\"markdown\",\"data\":{\"label\":\"App\",\"key\":\"markdown2_el1299821153237\",\"background_image\":[],\"value\":\"# App\\nThe **App** entity serves as the main organizer of the system. It features a structured arrangement of folders and files represented by Modules, Module Types, and Entities.\\n\\nThis representation transforms into an independent program within the system, encapsulating all its modules and models within its structure. Moreover, it can be installed or uninstalled in an initialized environment.\\n\\nWhen an app is created, a module with the same name as the app is also generated. Subsequently, any created entities, whether database models or web pages, are associated with the app through the selection of its corresponding module.\\n\\nThe system provides an interface at `desk/App Manager/view` that allows managing apps within the system. This includes installing or uninstalling them or retrieving them from a repository.\\n\\n## Folder Structure of App\\n```js\\n/apps\\n\\t/loopar-webpage\\n\\t\\t/modules\\n\\t\\t\\t/pages\\n\\t\\t\\t\\t/loopar-concepts\\n\\t\\t\\t\\t\\t/client\\n\\t\\t\\t\\t\\t\\tloopar-concepts-view.jsx\\n\\t\\t\\t\\t\\tloopar-concepts.js\\n\\t\\t\\t\\t\\tloopar-concepts-controller.js\\n\\t\\t\\t\\t\\tloopar-concepts.json\\n```\\n### apps/\\nThe main branch of the directory is /apps, which serves as the root directory for all applications in the system.\\n\\n### App Name/\\nEach app resides within its own directory, named after the app, such as /loopar-webpage. This encapsulates all the app's components and modules.\\n\\n### Modules/\\nWithin the app directory, the /modules folder organizes the app into broader functional categories, such as core, sales, or client. These modules represent a higher-level organization that groups related entities and functionality.\\n\\n### Models Within Modules\\nEach module contains subdirectories that house individual models. For example, within a /pages directory, you might find models like loopar-concepts.\\n\\n### Model Files/\\nEach model has its own directory, which includes the following key files:\\n\\n- **Client/**\\nContains frontend files, such as loopar-concepts-view.jsx, for rendering the modelâ€™s user interface.\\n\\n- **Model.js**\\nManages the model's data and provides the logic for data handling and processing.\\n\\n- **model-controller.js**\\nDefines the permitted or customized actions for the model, such as specific API endpoints or logic for user interactions.\\n\\n- **model.json**  \\nContains the metadata for the model, including its schema, attributes, and configuration settings.\\n\\n**This hierarchical structure ensures that each app is modular, with clearly defined modules that group related functionality, and that each model within those modules is well-organized and self-contained**\"},\"elements\":[]}]}]",
  "__ENTITY__": "Page Builder"
}